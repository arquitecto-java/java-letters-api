buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:6.4.0'
	}
}

plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'pl.allegro.tech.build.axion-release' version '1.12.0'
	id 'java'
}

apply plugin: 'com.bmuschko.docker-spring-boot-application'
apply plugin: 'idea'

group = 'co.hatit'
project.version = scmVersion.version
sourceCompatibility = '1.8'

/*docker {
	name "java-letters-api"
}*/

docker {
	springBootApplication {
		baseImage = 'openjdk:13-jdk-alpine'
		//maintainer = 'Benjamin Muschko "benjamin.muschko@gmail.com"'
		ports = [8080]
		images = [name]
		//jvmArgs = ['-Xms256m', '-Xmx2048m']
		mainClassName = "com.arquitectojava.letters.api.LettersAPIApp"
	}
}

repositories {
	jcenter()
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'

	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
	implementation group: 'ma.glasnost.orika', name: 'orika-core', version: '1.5.4'

	implementation("io.springfox:springfox-swagger2:2.8.0")
	//compile("io.springfox:springfox-swagger-ui:2.8.0")

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	testRuntimeOnly 'com.h2database:h2'
}

jar {
	manifest { attributes "Main-Class": "com.retailcompass.suggestattributes.server.SuggestAttributesServerApplication" }
}

test {
	useJUnitPlatform ()

	maxHeapSize = '128M'
}

sourceSets {
	integrationTest {
		java.srcDir file('src/integrationTest/java')
		resources.srcDir file('src/integrationTest/resources')
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output// + compileClasspath
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

task integrationTest(type: Test) {
	//useJUnitPlatform ()
	description = 'Runs integration tests.'
	group = 'verification'

	//testClassesDirs = sourceSets.integrationTest.output.classesDirs
	//classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
	shouldRunAfter test
}

check.dependsOn integrationTest

/*idea {
	module {
		testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
		testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
	}
}*/